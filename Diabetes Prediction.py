# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xwp2jMIE9IXywzK4nG6b_JY9zOG6uBTY
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""The Dataset"""

diabetes_dataset = pd.read_csv('../input/diabetes-data-set/diabetes.csv')

"""Exploratory Data Analysis"""

diabetes_dataset.shape

diabetes_dataset.head()

diabetes_dataset.info()

diabetes_dataset.duplicated()

diabetes_dataset.describe()

import seaborn as sns
sns.boxplot(data=diabetes_dataset)

diabetes_dataset['Outcome'].value_counts().plot(kind='bar')

diabetes_dataset.groupby('Outcome').mean()

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=[10,6])
sns.heatmap(diabetes_dataset.corr(),annot=True)

"""Splitting into Train and Test sets"""

X = diabetes_dataset.drop(columns='Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

#Standard Scaler
scaler = StandardScaler()
scaler.fit(X)
standardized_data = scaler.transform(X)
print(standardized_data)
X = standardized_data

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

"""**Support Vector Machine**"""

classifier = svm.SVC(kernel='linear')

classifier.fit(x_train, y_train)

x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)
print(training_data_accuracy)

x_test_prediction = classifier.predict(x_test)
testing_data_accuracy = accuracy_score(x_test_prediction, y_test)
print(testing_data_accuracy)

"""**Logistic Regression**"""

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(x_train, y_train)

x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)
print(training_data_accuracy)

x_test_prediction = model.predict(x_test)
testing_data_accuracy = accuracy_score(x_test_prediction, y_test)
print(testing_data_accuracy)

"""**K-Nearest Neighbor**"""

from sklearn.neighbors import KNeighborsClassifier
model=KNeighborsClassifier(n_neighbors=50)
model.fit(x_train,y_train)

x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)
print(training_data_accuracy)

x_test_prediction = model.predict(x_test)
testing_data_accuracy = accuracy_score(x_test_prediction, y_test)
print(testing_data_accuracy)

"""**Decision Tree Classifier**"""

from sklearn.tree import DecisionTreeClassifier
model=DecisionTreeClassifier()
model.fit(x_train,y_train)

x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)
print(training_data_accuracy)

x_test_prediction = model.predict(x_test)
testing_data_accuracy = accuracy_score(x_test_prediction, y_test)
print(testing_data_accuracy)

"""**Random Forest Classifier**"""

from sklearn.ensemble import RandomForestClassifier
model=RandomForestClassifier()
model.fit(x_train,y_train)

x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)
print(training_data_accuracy)

x_test_prediction = model.predict(x_test)
testing_data_accuracy = accuracy_score(x_test_prediction, y_test)
print(testing_data_accuracy)

"""**Conclusion**"""

model = ['Support Vector Machine', 'Logistic Regression', 'K Nearest Neighbor', 'Decision Tree Classifier', 'Random Forest Classifier']
train_score = [0.7866449511400652, 0.7850162866449512, 0.7687296416938111, 1.0, 1.0]
test_score = [0.7727272727272727, 0.7597402597402597, 0.7272727272727273, 0.7077922077922078, 0.7337662337662337]

pd.DataFrame({"model":model,"Train set accuracy":train_score, "Test set accuracy":test_score})

"""Result: Support Vector Machine gives the highest testing accuracy"""